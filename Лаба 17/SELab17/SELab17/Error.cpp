#include "stdafx.h" // Подключение предварительно скомпилированного заголовочного файла
#include "Error.h" // Подключение заголовочного файла Error.h

namespace Error { // Начало пространства имен Error
	// серии ошибок: 0 - 99 - системные ошибки
	//				100 - 109 - ошибки параметров 
	//				110 - 119 - ошибки открытия и чтения
	ERROR errors[ERROR_MAX_ENTRY] = // Объявление и инициализация массива ошибок
	{
		ERROR_ENTRY(0, "Недопустимый код ошмибки"), // Ошибка с кодом 0 и сообщением
		ERROR_ENTRY(1, "Системный сбой"), // Ошибка с кодом 1 и сообщением
		ERROR_ENTRY_NODEF(2), // Неопределенная ошибка с кодом 2
		ERROR_ENTRY_NODEF(3), // Неопределенная ошибка с кодом 3
		ERROR_ENTRY_NODEF(4), // Неопределенная ошибка с кодом 4
		ERROR_ENTRY_NODEF(5), // Неопределенная ошибка с кодом 5
		ERROR_ENTRY_NODEF(6), // Неопределенная ошибка с кодом 6
		ERROR_ENTRY_NODEF(7), // Неопределенная ошибка с кодом 7
		ERROR_ENTRY_NODEF(8), // Неопределенная ошибка с кодом 8
		ERROR_ENTRY_NODEF(9), // Неопределенная ошибка с кодом 9
		ERROR_ENTRY_NODEF10(10), // Неопределенная ошибка с кодом 10
		ERROR_ENTRY_NODEF10(20), // Неопределенная ошибка с кодом 20
		ERROR_ENTRY_NODEF10(30), // Неопределенная ошибка с кодом 30
		ERROR_ENTRY_NODEF10(40), // Неопределенная ошибка с кодом 40
		ERROR_ENTRY_NODEF10(50), // Неопределенная ошибка с кодом 50
		ERROR_ENTRY_NODEF10(60), // Неопределенная ошибка с кодом 60
		ERROR_ENTRY_NODEF10(70), // Неопределенная ошибка с кодом 70
		ERROR_ENTRY_NODEF10(80), // Неопределенная ошибка с кодом 80
		ERROR_ENTRY_NODEF10(90), // Неопределенная ошибка с кодом 90
		ERROR_ENTRY(100, "Параметр -in должен быть задан"), // Ошибка с кодом 100 и сообщением
		ERROR_ENTRY_NODEF(101), // Неопределенная ошибка с кодом 101
		ERROR_ENTRY_NODEF(102), // Неопределенная ошибка с кодом 102
		ERROR_ENTRY_NODEF(103), // Неопределенная ошибка с кодом 103
		ERROR_ENTRY(104, "Превышена длина входного параметра"), // Ошибка с кодом 104 и сообщением
		ERROR_ENTRY_NODEF(105), // Неопределенная ошибка с кодом 105
		ERROR_ENTRY_NODEF(106), // Неопределенная ошибка с кодом 106
		ERROR_ENTRY_NODEF(107), // Неопределенная ошибка с кодом 107
		ERROR_ENTRY_NODEF(108), // Неопределенная ошибка с кодом 108
		ERROR_ENTRY_NODEF(109), // Неопределенная ошибка с кодом 109
		ERROR_ENTRY(110, "Ошибка при открытии файла с исходным кодом (-in)"), // Ошибка с кодом 110 и сообщением
		ERROR_ENTRY(111, "Недопустимый символ в исходном файле (-in)"), // Ошибка с кодом 111 и сообщением
		ERROR_ENTRY(112, "Ошибка при создании файла протокола (-log)"), // Ошибка с кодом 112 и сообщением
		ERROR_ENTRY(113, "Ошибка при создании выходного файла (-out)"), // Ошибка с кодом 113 и сообщением
		ERROR_ENTRY(114, "Ошибка разбора цепочки"), // Ошибка с кодом 114 и сообщением
		ERROR_ENTRY(115, "Индекс строки больше размера контейнера"), // Ошибка с кодом 115 и сообщением
		ERROR_ENTRY(116, "Файл не существует"), // Ошибка с кодом 116 и сообщением
		ERROR_ENTRY(117, "Ошибка разбора входной строки"), // Ошибка с кодом 117 и сообщением
		ERROR_ENTRY_NODEF(118), // Неопределенная ошибка с кодом 118
		ERROR_ENTRY_NODEF(119), // Неопределенная ошибка с кодом 119
		ERROR_ENTRY_NODEF10(120), // Неопределенная ошибка с кодом 120
		ERROR_ENTRY_NODEF10(130), // Неопределенная ошибка с кодом 130
		ERROR_ENTRY_NODEF10(140), // Неопределенная ошибка с кодом 140
		ERROR_ENTRY_NODEF10(150), // Неопределенная ошибка с кодом 150
		ERROR_ENTRY_NODEF10(160), // Неопределенная ошибка с кодом 160
		ERROR_ENTRY_NODEF10(170), // Неопределенная ошибка с кодом 170
		ERROR_ENTRY_NODEF10(180), // Неопределенная ошибка с кодом 180
		ERROR_ENTRY_NODEF10(190), // Неопределенная ошибка с кодом 190
		ERROR_ENTRY_NODEF100(200), // Неопределенная ошибка с кодом 200
		ERROR_ENTRY_NODEF100(300), // Неопределенная ошибка с кодом 300
		ERROR_ENTRY_NODEF100(400), // Неопределенная ошибка с кодом 400
		ERROR_ENTRY_NODEF100(500), // Неопределенная ошибка с кодом 500
		ERROR_ENTRY_NODEF100(600), // Неопределенная ошибка с кодом 600
		ERROR_ENTRY_NODEF100(700), // Неопределенная ошибка с кодом 700
		ERROR_ENTRY_NODEF100(800), // Неопределенная ошибка с кодом 800
		ERROR_ENTRY_NODEF100(900)  // Неопределенная ошибка с кодом 900
	};

	ERROR geterror(int id) { // Функция для получения ошибки по ID
		if (id > 0 && id < ERROR_MAX_ENTRY) { // Проверка, что ID в допустимом диапазоне
			return errors[id]; // Возврат соответствующей ошибки
		}
		else {
			return errors[0]; // Возврат ошибки по умолчанию, если ID недействителен
		}
	}

	ERROR geterrorin(int id, int line, int col, std::string buff, std::vector<std::string> MyVector) // Функция для получения ошибки с дополнительной информацией
	{
		if (id > 0 && id < ERROR_MAX_ENTRY) { // Проверка, что ID в допустимом диапазоне
			errors[id].inext.col = col; // Установка колонки ошибки
			errors[id].inext.line = line; // Установка строки ошибки
			errors[id].inext.buff = buff; // Установка буфера ошибки
			errors[id].inext.MyVector = MyVector; // Установка вектора дополнительных данных
			return errors[id]; // Возврат соответствующей ошибки с дополнительной информацией
		}
		else {
			return errors[0]; // Возврат ошибки по умолчанию, если ID недействителен
		}
	}

	ERROR geterrorfst(int id, int line, std::string buff) // Функция для получения первой ошибки с дополнительной информацией
	{
		if (id > 0 && id < ERROR_MAX_ENTRY) { // Проверка, что ID в допустимом диапазоне
			errors[id].inext.fstline = line; // Установка первой строки ошибки
			errors[id].inext.buff = buff; // Установка буфера ошибки
			return errors[id]; // Возврат соответствующей ошибки с дополнительной информацией
		}
		else {
			return errors[0]; // Возврат ошибки по умолчанию, если ID недействителен
		}
	}

} // Конец пространства имен Error
